{"version":3,"sources":["assets/overcast.jpg","assets/rain.jpg","assets/storm.jpg","assets/space.jpg","context/context.js","components/weatherCard.js","components/locationMapper.js","containers/WeeklyWeather.js","components/search.js","App.js","serviceWorker.js","index.js","assets/clear.jpg"],"names":["module","exports","ThemeContext","React","createContext","PositionContext","WeathCardContainer","styled","div","dayMap","backgroundMap","Clear","Rain","Overcast","Thunderstorm","Clouds","WeatherCard","props","useContext","setTheme","theme","time","Date","date","day","getDay","getDate","suffix","useEffect","today","main","onClick","title","temp","LocationMapper","placeName","Locations","filter","e","city","apiKey","WeeklyWeatherContainer","section","WeeklyWeather","position","setPosition","useState","undefined","forecast","setForecast","sessionStorage","getItem","sessionData","JSON","parse","console","log","a","navigator","geolocation","getCurrentPosition","geo","params","lon","coords","longitude","lat","latitude","appid","axios","get","then","response","setItem","stringify","data","fetchData","location","lng","daily","map","i","key","weather","description","toFixed","dt","sortedLocations","locations","sort","b","StyledSearch","DropDownList","ul","toggle","ListItem","li","Search","input","setInput","list","setList","setToggle","listSelection","setListSelection","length","newList","toUpperCase","includes","type","onChange","target","value","autoFocus","placeholder","clickHandler","d","month","getMonth","year","getFullYear","App","space","Provider","className","src","alt","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.093a704a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/overcast.b38ce85c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain.4ce5a7d0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm.638b558d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/space.b294966f.jpg\";","import React from 'react';\n\nexport const ThemeContext = React.createContext();\nexport const PositionContext = React.createContext()\n","import React, {useContext, useEffect} from 'react';\nimport {ThemeContext} from '../context/context';\nimport Clear from '../assets/clear.jpg';\nimport Clouds from '../assets/overcast.jpg';\nimport Rain from '../assets/rain.jpg';\nimport Thunderstorm from '../assets/storm.jpg';\nimport Overcast from '../assets/clear.jpg';\nimport styled from 'styled-components';\n\nconst WeathCardContainer = styled.div`\n    width: 200px;\n    background: none;\n    border-radius: 10px;\n    text-align: left;\n    padding: 10px;\n    transition: 0.3s;\n    &:hover{\n        cursor: pointer;\n        background: rgba(0,0,0,0.3);\n    }\n    h2{\n        color: white;\n        font-weight: 300;\n    }\n    h3{\n        color: white;\n    }\n    p{\n        color: white;\n        font-weight: 300;\n    }\n`\nconst dayMap = ['Sunday','Monday','Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\nconst backgroundMap = {'Clear': Clear, 'Rain': Rain, 'Overcast': Overcast, 'Thunderstorm' : Thunderstorm, 'Clouds': Clouds}\nconst WeatherCard = (props) => {\n    const {theme, setTheme} = useContext(ThemeContext)\n    const time = new Date(props.date*1000)\n    const day =dayMap[time.getDay()]\n    const date = time.getDate()\n    const suffix =  date === 1 || date === 21 || date === 31 ? `st`\n                   : date === 2 || date === 22 ? `nd` \n                   : date === 3 || date === 23 ? `rd` : `th`;\n\n    useEffect(() => {\n       if(props.today === 0){\n            setTheme(backgroundMap[props.main])   \n       }   \n    },[])\n\n    return (\n        <WeathCardContainer onClick={() => setTheme(backgroundMap[props.main])}>\n            <h2>{props.title}</h2>\n            <h3>{props.temp} &#x2103;</h3>\n            <p>{props.today === 0 ? `Today` : \n                props.today === 1 ? `Tomorrow` : `${day} ${date} ${suffix}`}</p>\n        </WeathCardContainer>\n    )\n}\n\nexport default WeatherCard","import Locations from './gb.json';\n\n\nconst LocationMapper = (placeName) => {\n   let result =  Locations.filter( e => e.city === placeName)\n   return result;\n}\n\nexport default LocationMapper;","import React, {useState,useEffect,useContext} from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport WeatherCard from '../components/weatherCard';\nimport {PositionContext} from '../context/context';\nimport {date} from '../App';\nimport LocationMapper from '../components/locationMapper';\n\nconst apiKey = `d62c3e3ede49b65f11eceeb16ca5c078`;\n\nconst WeeklyWeatherContainer = styled.section`\n    position: relative;\n    display: flex;\n    background: rgba(0,0,0,0.5);\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: center;\n    width: 100%;\n    margin: auto;\n`\n\nconst WeeklyWeather = () => {\n    const {position, setPosition} = useContext(PositionContext)\n    const [forecast, setForecast] = useState(undefined)\n\n\n  useEffect(() => {\n    if(sessionStorage.getItem(`${position}-${date}`)){\n        let sessionData = JSON.parse(sessionStorage.getItem(`${position}-${date}`))\n        setForecast(sessionData)\n        console.log('Using Session Storage')\n    } else { \n        if(position === 'userLocation') {\n            const fetchData = async () => {  \n                navigator.geolocation.getCurrentPosition((geo) => {\n                    const params = {lon: geo.coords.longitude, lat: geo.coords.latitude, appid: apiKey}\n                    axios.get('https://api.openweathermap.org/data/2.5/onecall?', {params}).\n                    then((response) => {\n                            sessionStorage.setItem(`${position}-${date}`,JSON.stringify(response.data))\n                            setForecast(response.data)\n                            console.log('New Call')})\n                })\n            }\n            fetchData()\n\n        } else {\n            let location = LocationMapper(position)\n            const fetchData = async () => {\n                let params = {lat: location[0].lat,lon: location[0].lng, appid: apiKey}\n                const response = await axios.get('https://api.openweathermap.org/data/2.5/onecall?', {params})\n                sessionStorage.setItem(`${position}-${date}`,JSON.stringify(response.data))\n                setForecast(response.data)\n                console.log('New Call')\n            }\n            fetchData()\n        }\n    }\n  },[position])\n\n    return (\n        <WeeklyWeatherContainer>\n            {forecast ? forecast.daily.map((e,i) => (\n                <WeatherCard\n                    key={i}\n                    title={e.weather[0].description}\n                    temp={(e.temp.day-275.15).toFixed()}\n                    date={e.dt}\n                    today={i}\n                    main={e.weather[0].main}\n                    />\n            )) \n            : <p>Loading...</p>}            \n        </WeeklyWeatherContainer>\n    )\n}\n\nexport default WeeklyWeather","import React, {useState, useEffect, useContext} from 'react';\nimport {PositionContext} from '../context/context';\nimport LocationMapper from './locationMapper';\nimport styled from 'styled-components';\nimport locations from './gb.json';\n\nconst sortedLocations = locations.sort((a,b) => (a.city > b.city) ? 1 : (b.city > a.city) ? -1 : 0);\n\nconst StyledSearch = styled.section`\n    position: relative;\n    width: 350px;\n    margin: 100px auto;\n    input{\n        color: white;\n        border: none;\n        border-bottom: 1px solid white;\n        padding: 20px;\n        font-size: 25px;\n        background: none;\n        width: 100%;\n        &::placeholder{\n            color: white;\n            font-weight: 300;\n        }\n    }\n`\n\nconst DropDownList = styled.ul`\n    position: absolute;\n    background:rgba(255,255,255,0.6);\n    padding: 0;\n    top: 70px;\n    left: 0;\n    width: 350px;\n    list-style: none;\n    transition: 0.2s;\n    max-height: ${props => props.toggle ? `350px` : `0`};\n    overflow: scroll;\n    border-radius: 5px;\n    z-index: 1000;\n`\nconst ListItem = styled.li`\n    width: 100%;\n    color: black;\n    margin: 0;\n    padding: 20px;\n    transition: 0.2s;\n    border-bottom: 1px solid silver;\n    &:hover{\n        cursor: pointer;\n        background: rgba(255,255,255,0.8);\n    }\n`\n\nconst Search = () => {\n    const {position, setPosition} = useContext(PositionContext)\n    const [input, setInput] = useState('')\n    const [list, setList] = useState(sortedLocations)\n    const [toggle, setToggle] = useState(false)\n    const [listSelection, setListSelection] = useState(undefined)\n\n    useEffect(() => {\n        input.length >= 1 && input !== listSelection ? setToggle(true) : setToggle(false);\n        let newList = sortedLocations.filter((a) => (a.city).toUpperCase().includes((input).toUpperCase()))\n        setList(newList)\n    }, [input,listSelection])\n\n    const clickHandler = (e) => {\n        setInput(e)\n        setListSelection(e)\n        setToggle(false)\n    }\n\n    useEffect(() => {\n        if(listSelection !== undefined) {\n            setPosition(listSelection)\n        }\n    }, [listSelection])\n\n    return (\n        <StyledSearch>\n            <input type='text' onChange={(e) => setInput(e.target.value)} autoFocus value={input} placeholder='Type to find location...'/>\n            <DropDownList toggle={toggle}>\n                {list.map((e,i) => (\n                   <ListItem onClick={() => clickHandler(e.city)} key={i}>{e.city}</ListItem> \n                ))}\n            </DropDownList>\n        </StyledSearch>\n    )\n}\n\nexport default Search;","import React, {useState} from 'react';\nimport WeeklyWeather from './containers/WeeklyWeather';\nimport Search from './components/search';\nimport {ThemeContext, PositionContext} from './context/context';\nimport space from './assets/space.jpg';\nimport './App.scss';\n\nconst d = new Date();\nconst day = d.getDate()\nconst month = d.getMonth()\nconst year = d.getFullYear()\nexport const date = `${day}/${month}/${year}`\n\n\nfunction App() {\n  const [theme, setTheme] = useState(space)\n  const [position, setPosition] = useState(`userLocation`)\n\n  return (\n    <ThemeContext.Provider value={{theme,setTheme}}>\n      <div className=\"App\">\n        <img className=\"Background\" src={theme} alt='Current weather'/>\n        <h1>Whats the Weather?</h1>\n        <PositionContext.Provider value={{position,setPosition}}>\n          <Search/>\n          <WeeklyWeather/>\n        </PositionContext.Provider>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/clear.b4cbe3b6.jpg\";"],"sourceRoot":""}