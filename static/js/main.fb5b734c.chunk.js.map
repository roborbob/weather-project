{"version":3,"sources":["assets/overcast.jpg","assets/rain.jpg","assets/clear.jpg","assets/storm.jpg","context/themeContext.js","components/weatherCard.js","containers/WeeklyWeather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ThemeContext","React","createContext","WeathCardContainer","styled","div","dayMap","backgroundMap","Clear","Rain","Overcast","Thunderstorm","Clouds","WeatherCard","props","useContext","setTheme","theme","time","Date","date","day","getDay","getDate","suffix","onClick","main","title","temp","today","WeeklyWeatherContainer","section","WeeklyWeather","useState","lat","lon","position","setPosition","undefined","forecast","setForecast","useEffect","navigator","geolocation","getCurrentPosition","data","coords","latitude","longitude","sessionStorage","getItem","sessionData","JSON","parse","console","log","a","params","appid","axios","get","response","setItem","stringify","fetchData","daily","map","e","i","key","weather","description","toFixed","dt","App","storm","Provider","value","className","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb5b734c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/overcast.b38ce85c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain.4ce5a7d0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear.b4cbe3b6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm.638b558d.jpg\";","import React from 'react';\n\nexport const ThemeContext = React.createContext();\n","import React, {useContext} from 'react';\nimport {ThemeContext} from '../context/themeContext';\nimport Clear from '../assets/clear.jpg';\nimport Clouds from '../assets/overcast.jpg';\nimport Rain from '../assets/rain.jpg';\nimport Thunderstorm from '../assets/storm.jpg';\nimport Overcast from '../assets/clear.jpg';\nimport styled from 'styled-components';\n\nconst WeathCardContainer = styled.div`\n    width: 200px;\n    background: none;\n    border-radius: 10px;\n    text-align: left;\n    padding: 10px;\n    transition: 0.3s;\n    &:hover{\n        cursor: pointer;\n        background: rgba(0,0,0,0.3);\n    }\n    h2{\n        color: white;\n        font-weight: 300;\n    }\n    p{\n        color: white;\n        font-weight: 300;\n    }\n`\nconst dayMap = ['Sunday','Monday','Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\nconst backgroundMap = {'Clear': Clear, 'Rain': Rain, 'Overcast': Overcast, 'Thunderstorm' : Thunderstorm, 'Clouds': Clouds}\nconst WeatherCard = (props) => {\n    const {theme, setTheme} = useContext(ThemeContext)\n    const time = new Date(props.date*1000)\n    const day =dayMap[time.getDay()]\n    const date = time.getDate()\n    const suffix =  date === 1 || date === 21 || date === 31 ? `st`\n                   : date === 2 || date === 22 ? `nd` \n                   : date === 3 || date === 23 ? `rd` : `th`;\n    return (\n        <WeathCardContainer onClick={() => setTheme(backgroundMap[props.main])}>\n            <h2>{props.title}</h2>\n            <h3>{props.temp} &#x2103;</h3>\n            <p>{props.today === 0 ? `Today` : \n                props.today === 1 ? `Tomorrow` : `${day} ${date} ${suffix}`}</p>\n        </WeathCardContainer>\n    )\n}\n\nexport default WeatherCard","import React, {useState,useEffect} from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport WeatherCard from '../components/weatherCard';\n\nconst apiKey = `d62c3e3ede49b65f11eceeb16ca5c078`;\n\nconst WeeklyWeatherContainer = styled.section`\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: center;\n    width: 600px;\n    margin: auto;\n`\n\nconst WeeklyWeather = () => {\n    const [position, setPosition] = useState({lat: 51.5074,lon: 0.1278})\n    const [forecast, setForecast] = useState(undefined)\n  \n  useEffect(() => {\n    const success = (data) => {\n        setPosition({lat: data.coords.latitude,lon: data.coords.longitude})\n    }\n    navigator.geolocation.getCurrentPosition(success)\n  },[])\n\n  useEffect(() => {\n    if(sessionStorage.getItem(`forecast-${position.lat}-${position.lon}`)){\n        let sessionData = JSON.parse(sessionStorage.getItem(`forecast-${position.lat}-${position.lon}`))\n        setForecast(sessionData)\n        console.log('Using Session Storage')\n    }else{\n      const fetchData = async () => {\n        let params = {lon: position.lon, lat: position.lat, appid: apiKey}\n        const response = await axios.get('https://api.openweathermap.org/data/2.5/onecall?', {params})\n        sessionStorage.setItem(`forecast-${position.lat}-${position.lon}`,JSON.stringify(response.data))\n        setForecast(response.data)\n        console.log('New Call')\n      }\n      fetchData()\n    }\n  },[position])\n    return (\n        <WeeklyWeatherContainer>\n            {forecast ? forecast.daily.map((e,i) => (\n                <WeatherCard\n                    key={i}\n                    title={e.weather[0].description}\n                    temp={(e.temp.day-275.15).toFixed()}\n                    date={e.dt}\n                    today={i}\n                    main={e.weather[0].main}\n                    />\n            )) \n            : <p>Loading...</p>}            \n        </WeeklyWeatherContainer>\n    )\n}\n\nexport default WeeklyWeather","import React, {useState} from 'react';\nimport WeeklyWeather from './containers/WeeklyWeather';\nimport {ThemeContext} from './context/themeContext';\nimport storm from './assets/storm.jpg';\nimport './App.scss';\n\n\nfunction App() {\n  const [theme, setTheme] = useState(storm)\n  return (\n    <ThemeContext.Provider value={{theme,setTheme}}>\n      <div className=\"App\">\n        <img className=\"Background\" src={theme} alt='Current weather'/>\n        <h1>Weather Forecasting Application</h1>\n          <WeeklyWeather/>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}